import numpy as np

"""
Unit test to check the prediction.

Args:
    mlp (MLP): MLP instance
    yprime (array_like): output generated by neural network (all class)
    y_one_hot_encoding (array_like): output from the dataset encoded using one_hot_encoding

"""

def compute_cost_test(mlp,yprime,y_one_hot_encoding):
    J =  mlp.compute_cost(yprime,y_one_hot_encoding)
    assert np.isclose(J,0.28762916516), f"Error: Cost must be 0.28762916516 for a perfect prediction but got {J}"
    print("\033[92mAll tests passed!")


"""
Unit test to check the prediction.

Args:
    p (array_like): prediction generated by neural network. (class)
    y (array_like): output from the dataset
    accuracyFunction (function): the implementation of the accuracy function of the utils library. 

"""

def predict_test(p,y,accuracyFunction):
    numDiff = 0
    for i in range(p.shape[0]):
        if p[i] != y[i]:
            numDiff += 1
    assert numDiff == 124, f"Case 1: predict_test: there are 124 wrong predictions but got {numDiff}"
    accuracy = accuracyFunction(p,y)
    assert np.isclose(accuracy,0.9752), f"Case 2: accuracy must be 0.9752 for a perfect prediction but got {accuracy}"
    print("\033[92mAll tests passed!")

